generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model File {
  id              Int      @id @default(autoincrement())
  filename        String   @db.VarChar(255)
  initialFilename String   @db.VarChar(255)
  path            String   @db.VarChar(255)
  uri             String   @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  // Back-relation for links using this file as an image.
  links           Link[]   @relation("link_image")
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique @db.VarChar(255)
  password            String?             @db.VarChar(255)
  firstName           String?             @db.VarChar(255)
  lastName            String?             @db.VarChar(255)
  lastLoginDate       DateTime
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now()) @updatedAt
  sessions            Session[]
  notes               Note[]
  notebooks           Notebook[]
  tasks               Task[]
  comments            Comment[]
  collaborations      NoteCollaboration[]
  invitationsSent     Invitation[]        @relation("InvitationsSent")
  invitationsReceived Invitation[]        @relation("InvitationsReceived")

  events        Event[]
  eventsShared  EventSharedWithMember[]
  resetTokens   ResetToken[]
  searchHistory SearchHistory[]
  scores        Score[]
  noteTasks     NoteTask[]
  devices       Device[]

  AutoInstruction    AutoInstruction[]
  DailyTask          DailyTask[]
  DailyPlan          DailyPlan[]
  DailyTaskHistory   DailyTaskHistory[]
  CalendarEvent      CalendarEvent[]
  googleAccessToken  String?            @db.Text // Ajout du token d'accès Google
  googleRefreshToken String?            @db.Text // (Optionnel) Pour rafraîchir le token

  // A user owns many link groups.
  linkGroups LinkGroup[]

  // Links owned by the user.
  links Link[] @relation("UserLinks")

  NotificationPreference           NotificationPreference?
  CalendarEventInvitationsSent     CalendarEventInvitation[] @relation("CalendarEventInvitationsSent")
  CalendarEventInvitationsReceived CalendarEventInvitation[] @relation("CalendarEventInvitationsReceived")


  weatherFavorites Favorite[]

  Chronometer Chronometer[]


  BlocNote BlocNote[]
}

model AutoInstruction {
  id          Int      @id @default(autoincrement())
  description String   @db.Text
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

// feature (autoinstructions-suggestions) >>>
model AutoInstructionSuggestion {
  id          Int    @id @default(autoincrement())
  description String @db.Text
}

// <<< feature (autoinstructions-suggestions)

// feature (push-notifications) >>>
model Device {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  platform  Platform
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Platform {
  WEB
  MOBILE
}

// <<< feature (push-notifications)

model SearchHistory {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  searchTerm String
  searchDate DateTime @default(now())
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Note {
  id             Int                 @id @default(autoincrement())
  title          String
  content        String?             @db.LongText
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  userId         Int
  notebookId     Int?
  clickCounter   Int                 @default(0)
  user           User                @relation(fields: [userId], references: [id])
  notebook       Notebook?           @relation(fields: [notebookId], references: [id])
  collaborations NoteCollaboration[]
  labels         Label[]             @relation("NoteLabels")
  comments       Comment[]           @relation("NoteComments")
  notetasks      NoteTask[]          @relation("NoteTasks")
}

model BlocNote {
  id        Int      @id @default(autoincrement())
  content   String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Notebook {
  id     Int    @id @default(autoincrement())
  title  String
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  notes  Note[]
}

model NoteCollaboration {
  id              Int             @id @default(autoincrement())
  permissionLevel PermissionLevel
  noteId          Int
  userId          Int
  note            Note            @relation(fields: [noteId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
}

enum PermissionLevel {
  READ
  WRITE
  ADMIN
}

model Task {
  id                       Int                     @id @default(autoincrement())
  title                    String
  description              String
  dueDate                  DateTime?
  completed                Boolean                 @default(false)
  userId                   Int
  user                     User                    @relation(fields: [userId], references: [id])
  notificationPreferenceId Int?
  notificationPreference   NotificationPreference? @relation(fields: [notificationPreferenceId], references: [id])
  notificationSent         Boolean?                @default(false)
  token                    String?                 @unique
}

model Invitation {
  id                         Int     @id @default(autoincrement())
  receiverId                 Int?
  senderId                   Int
  receiver                   User?   @relation("InvitationsReceived", fields: [receiverId], references: [id])
  sender                     User    @relation("InvitationsSent", fields: [senderId], references: [id])
  externalEmailInvitation    String?
  tokenForExternalInvitation String?
  isExternal                 Boolean @default(false)
  isRelation                 Boolean @default(false)
}

model Event {
  id                       Int                     @id @default(autoincrement())
  title                    String
  description              String
  startDate                DateTime
  endDate                  DateTime
  isRecurring              Boolean?                @default(false)
  recurrence               Recurrence?             @default(NONE)
  location                 String
  place                    String?
  link                     String?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @default(now()) @updatedAt
  userId                   Int
  user                     User                    @relation(fields: [userId], references: [id])
  sharedWith               EventSharedWithMember[]
  notificationPreferenceId Int?
  notificationPreference   NotificationPreference? @relation(fields: [notificationPreferenceId], references: [id])
  notificationSent         Boolean?                @default(false)
  token                    String?                 @unique
}

enum Recurrence {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  ANNUAL
}

model EventSharedWithMember {
  eventId Int
  userId  Int
  event   Event @relation(fields: [eventId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@id([eventId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  noteId    Int
  user      User     @relation(fields: [userId], references: [id])
  note      Note     @relation("NoteComments", fields: [noteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model ResetToken {
  id              Int      @id @default(autoincrement())
  token           String
  validityEndDate DateTime
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
}

enum Level {
  EASY
  MEDIUM
  HARD
}

model Score {
  id        Int      @id @default(autoincrement())
  userId    Int
  time      Int
  level     Level
  createdAt DateTime @default(now())
  firstName String
  lastName  String
  user      User     @relation(fields: [userId], references: [id])
}

model NoteTask {
  id        Int        @id @default(autoincrement())
  title     String
  completed Boolean    @default(false)
  noteId    Int
  userId    Int
  parentId  Int?
  note      Note       @relation(fields: [noteId], references: [id], name: "NoteTasks", onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])
  parent    NoteTask?  @relation("NoteTaskRelation", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks  NoteTask[] @relation("NoteTaskRelation")
}

model NotificationPreference {
  id            Int                          @id @default(autoincrement())
  userId        Int                          @unique
  user          User                         @relation(fields: [userId], references: [id])
  types         NotificationPreferenceType[]
  timeBefore    Int
  timeUnit      TimeUnit
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @default(now()) @updatedAt
  tasks         Task[]
  events        Event[]
  CalendarEvent CalendarEvent[]
}

model NotificationPreferenceType {
  id                       Int                    @id @default(autoincrement())
  type                     NotificationType
  notificationPreference   NotificationPreference @relation(fields: [notificationPreferenceId], references: [id], onDelete: Cascade)
  notificationPreferenceId Int
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @default(now()) @updatedAt
}

enum NotificationType {
  EMAIL
  PUSH
}

enum TimeUnit {
  MINUTES
  HOURS
  DAYS
}

// feat (daily-tasks) >>>
model DailyPlan {
  id        Int      @id @default(autoincrement())
  date      DateTime
  confirmed Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([date, userId])
}

model DailyTask {
  id            Int       @id @default(autoincrement())
  uniqueTaskId  String    @unique @default(uuid()) // <-- New field for unique task ID
  title         String
  description   String?
  scheduledDate DateTime
  originalDate  DateTime?
  carriedOver   Boolean   @default(false)
  order         Int
  priority      Int
  completed     Boolean   @default(false)
  completedAt   DateTime?
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
}

model DailyTaskHistory {
  id            Int       @id @default(autoincrement())
  uniqueTaskId  String    @unique // <-- We'll copy the uniqueTaskId from DailyTask when archiving
  title         String
  description   String?
  scheduledDate DateTime
  originalDate  DateTime?
  carriedOver   Boolean   @default(false)
  order         Int
  priority      Int
  completed     Boolean   @default(false)
  completedAt   DateTime?
  userId        Int
  archivedAt    DateTime  @default(now())
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
}

// <<< feat (daily-tasks)

// NOTE: Feature - CalendarEvent >>>>>>>>>>>

enum InvitationStatus {
  PENDING
  ACCEPTED
  REFUSED
}

model CalendarEventInvitation {
  id              Int              @id @default(autoincrement())
  senderId        Int
  receiverId      Int?
  receiverEmail   String
  calendarEventId Int
  calendarEvent   CalendarEvent    @relation(fields: [calendarEventId], references: [id])
  receiver        User?            @relation("CalendarEventInvitationsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  sender          User             @relation("CalendarEventInvitationsSent", fields: [senderId], references: [id], onDelete: Cascade)
  status          InvitationStatus @default(PENDING)
  updatedAt       DateTime         @default(now())
  createdAt       DateTime         @default(now()) @updatedAt
}

// NOTE: Feature - CalendarEvent <<<<<<<<<<<

// refactor (calendar) >>>
enum CalendarEventType {
  TASK
  EVENT
}

model CalendarEvent {
  id                       Int                       @id @default(autoincrement())
  googleEventId            String?                   @unique
  eventType                CalendarEventType         @default(EVENT)
  title                    String?                   @db.Text
  description              String                    @db.Text
  dueDate                  DateTime?
  startDate                DateTime?
  endDate                  DateTime?
  isRecurring              Boolean?                  @default(false)
  recurrence               Recurrence?               @default(NONE)
  location                 String?                   @db.Text
  link                     String?                   @db.Text
  token                    String?                   @unique
  userId                   Int
  user                     User                      @relation(fields: [userId], references: [id])
  notificationPreferenceId Int?
  notificationPreference   NotificationPreference?   @relation(fields: [notificationPreferenceId], references: [id])
  pushNotificationSent     Boolean?                  @default(false)
  emailNotificationSent    Boolean?                  @default(false)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt
  calendarEventInvitations CalendarEventInvitation[]
}

// <<< refactor (calendar)

// Chronometer model
enum ChronometerMode {
  COUNTDOWN
  STOPWATCH
}

model Chronometer {
  id          String          @id @default(uuid())
  name        String
  mode        ChronometerMode
  startTime   DateTime?
  elapsedTime Int // Temps écoulé en secondes depuis le démarrage du chronomètre
  duration    Float? // Pour le mode COUNTDOWN: durée totale configurée en secondes
  isRunning   Boolean         @default(false)
  userId      Int
  user        User            @relation(fields: [userId], references: [id])
}

// feature (refactor-links) >>>
model Link {
  id  String @id @default(cuid())
  url String @unique

  // Optional relation to the owner.
  ownerId Int
  owner   User @relation("UserLinks", fields: [ownerId], references: [id])

  // Optional relation to an image file.
  imageId Int?
  image   File? @relation("link_image", fields: [imageId], references: [id])

  screenShotAt DateTime?
  groups       LinkGroupLink[]
}

model LinkGroup {
  id          String          @id @default(cuid())
  title       String
  description String?
  userId      Int
  user        User            @relation(fields: [userId], references: [id])
  links       LinkGroupLink[]
}

model LinkGroupLink {
  linkGroupId  String
  linkId       String
  linkName     String
  clickCounter Int    @default(0)

  linkGroup LinkGroup @relation(fields: [linkGroupId], references: [id], onDelete: Cascade)
  link      Link      @relation(fields: [linkId], references: [id])

  @@id([linkGroupId, linkId])
}

// feature (refactor-links) <<<

=======
//feature meteo
// Modèle City - représente une ville
model City {
  id        Int     @id @default(autoincrement())
  name      String
  country   String
  latitude  Float
  longitude Float
  timezone  String?

  weather   Weather?
  forecasts Forecast[]
  favorites Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, country])
  @@index([name])
}

// Modèle Weather - représente les conditions météo actuelles pour une ville
model Weather {
  id     Int  @id @default(autoincrement())
  cityId Int  @unique
  city   City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  temperature Float
  tempMin     Float?
  tempMax     Float?
  feelsLike   Float?
  humidity    Int
  windSpeed   Float
  pressure    Int?
  visibility  Int?
  description String
  icon        String?

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expiresAt])
}

// Modèle Forecast - représente les prévisions météorologiques
model Forecast {
  id     Int  @id @default(autoincrement())
  cityId Int
  city   City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  forecastTime      DateTime
  temperature       Float
  tempMin           Float?
  tempMax           Float?
  feelsLike         Float?
  humidity          Int?
  windSpeed         Float?
  pressure          Int?
  visibility        Int?
  precipProbability Float?
  description       String
  icon              String?
  forecastType      String

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([cityId, forecastTime, forecastType])
  @@index([expiresAt])
}

// Modèle Favorite - représente les villes favorites des utilisateurs
model Favorite {
  id     Int @id @default(autoincrement())
  userId Int
  cityId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  city City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@unique([userId, cityId])
}

