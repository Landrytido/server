# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthenticationDto {
  email: String!
  password: String!
}

type Comment {
  content: String!
  createdAt: DateTime!
  id: Int!
  note: Note!
  noteId: Int!
  user: User!
  userId: Int!
}

input CreateLinkDto {
  description: String
  linkGroupId: Int!
  name: String!
  url: String!
  userId: Int
}

input CreateLinkGroupDto {
  description: String
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Invitation {
  id: Int!
  receiver: User!
  receiverId: Int!
  sender: User!
  senderId: Int!
}

type Link {
  description: String
  id: Int!
  linkGroup: LinkGroup
  linkGroupId: Int!
  name: String!
  url: String!
  user: User
  userId: Int!
}

type LinkGroup {
  description: String
  id: Int!
  links: [Link!]!
  name: String!
  user: User
  userId: Int!
}

type Meet {
  createdAt: DateTime!
  description: String!
  endDate: DateTime!
  id: Int!
  isRecurring: Boolean!
  location: String!
  recurrence: Recurrence!
  sharedWith: [MeetSharedWithMember!]!
  startDate: DateTime!
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type MeetSharedWithMember {
  meet: Meet!
  meetId: Int!
  user: User!
  userId: Int!
}

type Mutation {
  create(dto: CreateLinkDto!): Link!
  createLinkGroup(dto: CreateLinkGroupDto!): LinkGroup!
  deleteLink(id: Int!): Link!
  deleteLinkGroup(linkGroupId: Int!): LinkGroup!
  register(dto: SaveUserDto!): User!
  saveUser(dto: SaveUserDto!): User!
  updateLink(dto: UpdateLinkDto!, id: Int!): Link!
  updateLinkGroup(dto: CreateLinkGroupDto!, linkGroupId: Int!): LinkGroup!
}

type Note {
  collaborations: [NoteCollaboration!]!
  content: String
  createdAt: DateTime!
  id: Int!
  notebook: Notebook
  notebookId: Int
  tags: [Tag!]!
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type NoteCollaboration {
  id: Int!
  note: Note!
  noteId: Int!
  permissionLevel: PermissionLevel!
  user: User!
  userId: Int!
}

type Notebook {
  id: Int!
  notes: [Note!]!
  title: String!
  user: User!
  userId: Int!
}

enum PermissionLevel {
  ADMIN
  READ
  WRITE
}

type Query {
  findLinkById(id: Int!): Link!
  findLinkGroupById(linkGroupId: Int!): LinkGroup!
  findLinkGroupsByUserId: [LinkGroup!]!
  findLinksByLinkGroupId(linkGroupId: Int!): [Link!]!
  findLinksByUserId: [Link!]!
  getAllLinkGroups: [LinkGroup!]!
  getLoggedUser: User!
  login(dto: AuthenticationDto!): String!
  refreshToken: String!
  validateToken(dto: TokenValidationDto!): Boolean!
}

enum Recurrence {
  ANNUAL
  DAILY
  MONTHLY
  NONE
  WEEKLY
}

type ResetToken {
  id: Int!
  token: String!
  user: User!
  userId: Int!
  validityEndDate: DateTime!
}

input SaveUserDto {
  email: String!
  firstName: String!
  id: Int
  lastName: String
  password: String!
}

type Session {
  createdAt: DateTime!
  id: Int!
  token: String!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type Tag {
  id: Int!
  name: String!
  notes: [Note!]!
}

type Task {
  completed: Boolean!
  description: String!
  dueDate: DateTime
  id: Int!
  title: String!
  user: User!
  userId: Int!
}

input TokenValidationDto {
  token: String!
}

input UpdateLinkDto {
  description: String
  name: String!
  url: String
}

type User {
  collaborations: [NoteCollaboration!]!
  comments: [Comment!]!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: Int!
  invitationsReceived: [Invitation!]!
  invitationsSent: [Invitation!]!
  lastName: String!
  linkGroups: [LinkGroup!]!
  links: [Link!]!
  meets: [Meet!]!
  meetsShared: [MeetSharedWithMember!]!
  notebooks: [Notebook!]!
  notes: [Note!]!
  resetTokens: [ResetToken!]!
  sessions: [Session!]!
  tasks: [Task!]!
  updatedAt: DateTime!
}