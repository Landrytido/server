# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthenticationDto {
  email: String!
  password: String!
}

type AutoInstruction {
  createdAt: DateTime!
  description: String!
  id: Int!
  order: Float!
  updatedAt: DateTime!
}

input AutoInstructionInput {
  id: Float!
  order: Float!
}

type AutoInstructionSuggestion {
  description: String!
  id: Int!
}

type CalendarEvent {
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  emailNotificationSent: Boolean
  endDate: DateTime
  eventType: String!
  googleEventId: String
  id: Int!
  isRecurring: Boolean!
  link: String
  location: String
  notificationPreference: NotificationPreference!
  notificationPreferenceId: Int!
  notificationSent: Boolean
  pushNotificationSent: Boolean
  recurrence: Recurrence
  startDate: DateTime
  title: String
  token: String
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type CalendarEventInvitation {
  calendarEvent: CalendarEvent!
  calendarEventId: Int!
  id: Int!
  receiver: User!
  receiverEmail: String!
  sender: User!
  senderId: Int!
  status: String!
  updatedAt: DateTime!
}

type CombinedTask {
  carriedOver: Boolean!
  completed: Boolean!
  completedAt: DateTime
  createdAt: DateTime!
  description: String
  id: Int!
  priority: Float
  scheduledDate: DateTime!
  source: String!
  title: String!
}

type Comment {
  content: String!
  createdAt: DateTime!
  id: Int!
  note: Note!
  noteId: Int!
  user: User!
  userId: Int!
}

input CommentDto {
  content: String!
  noteId: Int!
  userId: Int!
}

input CreateAutoInstructionInput {
  description: String!
  order: Float!
  userId: Float!
}

input CreateCalendarEventDto {
  description: String
  dueDate: DateTime
  endDate: DateTime
  eventType: String! = "EVENT"
  googleEventId: String
  isRecurring: Boolean!
  link: String
  location: String
  notificationPreferenceId: Int
  recurrence: String
  startDate: DateTime
  title: String
  token: String
}

input CreateCalendarEventInvitationDto {
  calendarEventId: Int!
  receiverEmail: String
  senderId: Int!
}

input CreateDailyTaskDto {
  description: String
  order: Float
  priority: Int!
  scheduledDate: DateTime
  title: String!
  uniqueTaskId: String
}

input CreateLabelInput {
  name: String!
}

type DailyPlan {
  confirmed: Boolean!
  createdAt: DateTime!
  date: DateTime!
  id: Int!
  updatedAt: DateTime!
  userId: Int!
}

type DailyTask {
  carriedOver: Boolean!
  completed: Boolean!
  completedAt: DateTime
  createdAt: DateTime!
  description: String
  id: Int!
  order: Int!
  priority: Int!
  scheduledDate: DateTime!
  title: String!
  updatedAt: DateTime!
  userId: Int!
}

type DailyTaskHistory {
  archivedAt: DateTime!
  carriedOver: Boolean!
  completed: Boolean!
  completedAt: DateTime
  createdAt: DateTime!
  description: String
  id: Int!
  order: Int!
  originalDate: DateTime
  priority: Int!
  scheduledDate: DateTime!
  title: String!
  userId: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Device {
  createdAt: DateTime!
  id: Int!
  platform: String!
  token: String!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type File {
  createdAt: DateTime!
  filename: String!
  id: Int!
  initialFilename: String!
  linkImage: [Link!]!
  path: String!
  updatedAt: DateTime!
  uri: String!
}

input FileDto {
  filename: String!
  initialFilename: String!
  path: String!
  uri: String!
}

input GetLabelByIdInput {
  """ID du label à récupérer"""
  id: ID!
}

input GetNoteTasksByUserIdDto {
  completed: Boolean
  noteId: Int!
  userId: Int!
}

type Invitation {
  externalEmailInvitation: String
  id: Int!
  isExternal: Boolean!
  isRelation: Boolean!
  receiver: User
  receiverId: Int
  sender: User!
  senderId: Int!
  tokenForExternalInvitation: String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Label {
  id: String!
  name: String!
}

"""Possible Level options: EASY, MEDIUM, HARD"""
enum Level {
  EASY
  HARD
  MEDIUM
}

type Link {
  groups: [LinkGroupLink!]!
  id: String!
  image: File
  owner: User
  screenShotAt: DateTime
  url: String!
}

type LinkGroup {
  description: String
  id: String!
  links: [LinkGroupLink!]!
  title: String!
  user: User!
}

type LinkGroupLink {
  clickCounter: Int!
  link: Link!
  linkGroup: LinkGroup!
  linkGroupId: String!
  linkId: String!
  linkName: String!
}

input LoginWithGithubDto {
  code: String!
}

type MonthlyReport {
  completedTasks: Int!
  completionPercentage: Float!
  notCompletedTasks: Int!
  totalTasks: Int!
}

type Mutation {
  acceptCalendarEventInvitation(id: Int!): CalendarEventInvitation!
  acceptInvitation(invitationId: Int!): Invitation!
  addAutoInstruction(createAutoInstructionInput: CreateAutoInstructionInput!): AutoInstruction!
  addScore(firstName: String!, lastName: String!, level: Level!, time: Int!, userId: Int!): Score!
  completeProfile(firstName: String!, lastName: String!): User!
  confirmEndOfDay: Boolean!
  convertExternalInvitation(dto: SaveUserDto!): Invitation!
  createCalendarEvent(dto: CreateCalendarEventDto!): CalendarEvent!
  createCalendarEventInvitation(dto: CreateCalendarEventInvitationDto!, invitedEmails: [String!]!): [CalendarEventInvitation!]!
  createComment(data: CommentDto!): Comment!
  createDailyTask(dto: CreateDailyTaskDto!): DailyTask!
  createInvitation(dto: SaveInvitationDto!): Invitation!
  createLabel(dto: CreateLabelInput!): Label!
  createLink(dto: SaveLinkDto!): Link!
  createNote(dto: SaveNoteDto!): Note!
  createNotebook(dto: SaveNotebookDto!): Notebook!
  createNotificationPreference(dto: SaveNotificationPreferenceDto!): NotificationPreference!
  deleteCalendarEvent(id: Int!): CalendarEvent!
  deleteCalendarEventInvitation(id: Int!): CalendarEventInvitation!
  deleteComment(commentId: Float!): Boolean!
  deleteDailyTask(id: Int!): DailyTask!
  deleteInvitation(invitationId: Int!): Invitation!
  deleteLinkFromGroup(linkGroupId: String!, linkId: String!): Boolean!
  deleteLinkGroup(id: String!): LinkGroup!
  deleteNote(noteId: Int!): Note!
  deleteNotebook(notebookId: Int!): Notebook!
  deleteNotificationPreference(notificationPreferenceId: Int!): NotificationPreference!
  deleteSearchHistory(searchHistoryId: Int!): Boolean!
  denyCalendarEventInvitation(id: Int!): CalendarEventInvitation!
  incrementClickCounter(linkGroupId: String!, linkId: String!): LinkGroupLink!
  loginWithFacebook(accessToken: String!): String!
  loginWithGithub(dto: LoginWithGithubDto!): String!
  loginWithGoogle(accessToken: String!): String!
  markNotificationAsSent(id: Int!): CalendarEvent!
  register(dto: SaveUserDto!): User!
  registerDevice(platform: Platform!, token: String!): Boolean!
  removeAutoInstruction(id: Float!): AutoInstruction!
  removeNoteTaskById(id: Int!): NoteTask!
  reorderDailyTasks(dto: ReorderDailyTasksDto!): [DailyTask!]!
  reorderInstructions(instructions: [AutoInstructionInput!]!, userId: Float!): [AutoInstruction!]!
  resetClickCounter(linkGroupId: String!, linkId: String!): LinkGroupLink!
  saveFile(dto: FileDto!): File!
  saveLinkGroup(dto: SaveLinkGroupDto!): LinkGroup!
  saveNoteTask(dto: SaveNoteTaskDto!): NoteTask!
  saveSearchHistory(dto: SearchHistoryDto!): SearchHistory!
  saveUser(dto: SaveUserDto!): User!
  sendPushNotification(body: String!, data: JSONObject, title: String!): Boolean!

  """Synchronize Google Calendar events"""
  syncGoogleCalendar: Boolean!
  updateAutoInstruction(updateAutoInstructionInput: UpdateAutoInstructionInput!): AutoInstruction!
  updateCalendarEvent(dto: UpdateCalendarEventDto!, id: Int!): CalendarEvent!
  updateComment(commentId: Float!, data: CommentDto!): Comment!
  updateDailyTask(dto: UpdateDailyTaskDto!, id: Int!): DailyTask!
  updateLinkRelation(dto: SaveLinkDto!): LinkGroupLink!
  updateNote(dto: SaveNoteDto!, noteId: Int!): Note!
  updateNoteTask(dto: UpdateNoteTaskDto!): NoteTask!
  updateNotebook(dto: SaveNotebookDto!, notebookId: Int!): Notebook!
}

type Note {
  collaborations: [NoteCollaboration!]!
  content: String
  createdAt: DateTime!
  id: Int!
  labels: [Label!]!
  notebook: Notebook
  notebookId: Int
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type NoteCollaboration {
  id: Int!
  note: Note!
  noteId: Int!
  permissionLevel: PermissionLevel!
  user: User!
  userId: Int!
}

type NoteTask {
  completed: Boolean!
  id: Int!
  note: Note!
  noteId: Int!
  parent: NoteTask
  parentId: Int
  subtasks: [NoteTask!]
  title: String!
  user: User!
  userId: Int!
}

type Notebook {
  id: Int!
  notes: [Note!]!
  title: String!
  user: User!
  userId: Int!
}

type NotificationPreference {
  createdAt: DateTime!
  id: Int!
  timeBefore: Int!
  timeUnit: TimeUnit!
  types: [NotificationPreferenceType!]!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type NotificationPreferenceType {
  createdAt: DateTime!
  id: Int!
  notificationPreference: NotificationPreference!
  notificationPreferenceId: Int!
  type: NotificationType!
  updatedAt: DateTime!
}

"""Possible NotificationType options: EMAIL, PUSH"""
enum NotificationType {
  EMAIL
  PUSH
}

"""Possible PermissionLevel options : READ, WRITE, ADMIN"""
enum PermissionLevel {
  ADMIN
  READ
  WRITE
}

"""Possible Platform options: WEB, MOBILE"""
enum Platform {
  MOBILE
  WEB
}

type Query {
  findCommentsByNoteId(noteId: Float!): [Comment!]!
  findExternalEmailByToken(token: String!): String!
  findHotLinks(limit: Int!): [LinkGroupLink!]!
  findNoteById(noteId: Int!): Note!
  findNoteTaskById(id: Int!): NoteTask!
  findNotebookById(notebookId: Int!): Notebook!
  findNotebooks: [Notebook!]!
  findNotebooksByUserId: [Notebook!]!
  findNotes: [Note!]!
  findNotesByUserId: [Note!]!
  findReceivedInvitations: [Invitation!]!
  findRelations: [Relation!]!
  findSentInvitations: [Invitation!]!
  getAllCalendarEvents: [CalendarEvent!]!
  getAllLabels: [Label!]!
  getAutoInstructionSuggestionById(id: Int!): AutoInstructionSuggestion!
  getAutoInstructionSuggestions: [AutoInstructionSuggestion!]!
  getAutoInstructions(userId: Float!): [AutoInstruction!]!
  getCalendarEvent(id: Int!): CalendarEvent!
  getCalendarEventInvitationById(id: Int!): CalendarEventInvitation!
  getCalendarEventInvitationsByCalendarEventId(id: Int!): [CalendarEventInvitation!]!
  getCalendarEventInvitationsByReceiverEmail(email: String!): [CalendarEventInvitation!]!
  getCalendarEventInvitationsBySenderId(id: Int!): [CalendarEventInvitation!]!
  getCalendarEventsByToken(token: String!): [CalendarEvent!]!
  getCalendarEventsByUserId: [CalendarEvent!]!
  getDailyPlan(date: String!): DailyPlan
  getDailyTaskHistory(date: String!): [DailyTaskHistory!]!
  getDailyTasks(date: String): [DailyTask!]!
  getLabelById(dto: GetLabelByIdInput!): Label
  getLoggedUser: User!
  getMonthlyReport(month: Int!, year: Int!): MonthlyReport!
  getNotificationPreference: NotificationPreference!
  getSearchHistoryByUserId: [SearchHistory!]!
  getTasksCreatedOn(date: String!): [CombinedTask!]!
  login(dto: AuthenticationDto!): String!
  myLinkGroups: [LinkGroup!]!
  noteTasksByUserId(dto: GetNoteTasksByUserIdDto!): [NoteTask!]!
  refreshToken: String!
  topScores(level: Level = EASY, limit: Int = 10): [Score!]!
  topThreeScores: [Score!]!
  userScores(userId: Int!): [Score!]!
  validateToken(dto: TokenValidationDto!): Boolean!
}

"""Possible recurrence options: NONE, DAILY, WEEKLY, MONTHLY, ANNUAL"""
enum Recurrence {
  ANNUAL
  DAILY
  MONTHLY
  NONE
  WEEKLY
}

type Relation {
  friendEmail: String!
  friendFirstName: String!
  friendLastName: String!
  invitationId: Int!
  receiver: User!
  sender: User!
}

input ReorderDailyTasksDto {
  orderedIds: [Int!]!
}

type ResetToken {
  id: Int!
  token: String!
  user: User!
  userId: Int!
  validityEndDate: DateTime!
}

input SaveInvitationDto {
  email: String!
}

input SaveLinkDto {
  id: String
  imageId: Float
  linkGroupId: String!
  linkName: String!
  ownerId: Float
  screenShotAt: DateTime
  url: String!
}

input SaveLinkGroupDto {
  description: String
  id: String
  title: String!
}

input SaveNoteDto {
  content: String
  labelIds: [String!]
  notebookId: Int
  title: String!
}

input SaveNoteTaskDto {
  completed: Boolean
  id: Int
  noteId: Int!
  parentId: Int
  title: String!
  userId: Int!
}

input SaveNotebookDto {
  title: String!
}

input SaveNotificationPreferenceDto {
  timeBefore: Int!
  timeUnit: TimeUnit!
  types: [NotificationType!]!
}

input SaveUserDto {
  email: String!
  firstName: String!
  id: Int
  invitationToken: String
  lastLoginDate: DateTime
  lastName: String
  password: String!
}

type Score {
  createdAt: DateTime!
  firstName: String!
  id: Int!
  lastName: String!
  level: Level!
  time: Int!
  userId: Int!
}

type SearchHistory {
  id: Int!
  searchDate: DateTime!
  searchTerm: String!
  user: User!
  userId: Int!
}

input SearchHistoryDto {
  id: Int
  searchDate: DateTime!
  searchTerm: String!
  userId: Int!
}

type Session {
  createdAt: DateTime!
  id: Int!
  token: String!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

"""Possible TimeUnit options : MINUTES, HOURS, DAYS"""
enum TimeUnit {
  DAYS
  HOURS
  MINUTES
}

input TokenValidationDto {
  token: String!
}

input UpdateAutoInstructionInput {
  description: String!
  id: Float!
  order: Float!
}

input UpdateCalendarEventDto {
  description: String
  dueDate: DateTime
  emailNotificationSent: Boolean
  endDate: DateTime
  eventType: String
  googleEventId: String
  isRecurring: Boolean
  link: String
  location: String
  notificationPreferenceId: Int
  pushNotificationSent: Boolean
  recurrence: String
  startDate: DateTime
  title: String
  token: String
}

input UpdateDailyTaskDto {
  completed: Boolean
  description: String
  order: Float
  priority: Int
  scheduledDate: DateTime
  title: String
}

input UpdateNoteTaskDto {
  completed: Boolean
  id: Int!
  parentId: Int
  title: String
}

type User {
  calendarEvents: [CalendarEvent!]!
  collaborations: [NoteCollaboration!]!
  comments: [Comment!]!
  createdAt: DateTime!
  devices: [Device!]!
  email: String!
  firstName: String
  friends: [Relation!]!
  googleAccessToken: String
  googleRefreshToken: String
  id: Int!
  invitationsReceived: [Invitation!]!
  invitationsSent: [Invitation!]!
  lastLoginDate: DateTime
  lastName: String
  linkGroups: [LinkGroup!]!
  links: [Link!]!
  notebooks: [Notebook!]!
  notes: [Note!]!
  notificationPreference: NotificationPreference!
  resetTokens: [ResetToken!]!
  searchHistory: [SearchHistory!]!
  sessions: [Session!]!
  updatedAt: DateTime!
}